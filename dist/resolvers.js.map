{"version":3,"sources":["../resolvers.js"],"names":["iconv","require","fs","path","mongoose","Upload","name","description","parseValue","value","parseLiteral","ast","Error","serialize","File","id","obj","args","context","_id","file","rest","Query","fileByID","info","db","model","findById","lean","exec","covers","page","size","query","q","JSON","parse","find","skip","limit","coversTotal","count","Mutation","multiUpload","files","tag","insertMany","map","Object","assign","ordered","singleUpload","save","delFileByID","findByIdAndRemove","delFiles","Promise","resolve","reject","deleteMany","err","result","renameFileByID","filename","findByIdAndUpdate","new"],"mappings":"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","file":"resolvers.js","sourcesContent":["// import { GraphQLUpload } from 'apollo-upload-server'\nimport { GraphQLScalarType } from 'graphql'\nimport gql from 'graphql-tag'\nconst iconv = require('iconv-lite')\nconst fs = require('fs')\nconst path = require('path')\nconst mongoose = require('mongoose')\n\n\nexport default {\n  Upload: new GraphQLScalarType({\n    name: 'Upload',\n    description:\n    'The `Upload` scalar type represents a file upload promise that resolves ' +\n    'an object containing `stream`, `filename`, `mimetype` and `encoding`.',\n    // value from the client\n    parseValue(value) {\n      return value\n    },\n    // ast value is always in string format\n    parseLiteral(ast) {\n      throw new Error('Upload scalar literal unsupported')\n    },\n    // value sent to the client\n    serialize(value) {\n      return value\n      // return JSON.stringify(value)\n    }\n  }),\n  File: {\n    id (obj, args, context) {\n      // console.log(obj)\n      return obj._id\n    },\n    file (obj, args, context) {\n      const { _id, ...rest } = obj\n      return rest\n    }\n  },\n  Query: {\n    fileByID (obj, { id }, context, info) {\n      const File = context.db.model('File')\n      return File.findById(id).lean().exec()\n    },\n    covers (obj, { page, size, query }, context, info){\n      const File = context.db.model('File')\n      let q = JSON.parse(query)\n      // console.log(q)\n      return File.find(q).skip(page * size).limit(size).lean().exec()\n    },\n    coversTotal (obj, {query}, context, info) {\n      const File = context.db.model('File')\n      const q = typeof query === 'string' ? JSON.parse(query) : {}\n      return File.count(q).exec()\n    }\n  },\n  Mutation: {\n    multiUpload (obj, { files, tag }, context, info) {\n      // console.log(files)\n      const File = context.db.model('File')\n      return File.insertMany(files.map(file => Object.assign({}, file, {tag})), {ordered: false})\n    },\n    singleUpload (obj, { file, tag }, context, info) {\n      const File = context.db.model('File')\n      return new File(Object.assign({}, file, {tag})).save()\n    },\n    delFileByID (obj, { id }, context, info) {\n      const File = context.db.model('File')\n      return File.findByIdAndRemove(id).lean().exec()\n    },\n    delFiles (obj, {query}, context, info) {\n      const File = context.db.model('File')\n      return new Promise((resolve, reject) => {\n        File.deleteMany(JSON.parse(query), function (err, result) {\n          if (err) reject(err)\n          else resolve(true)\n        })\n      })\n    },\n    renameFileByID (obj, { id, filename }, context, info) {\n      const File = context.db.model('File')\n      return File.findByIdAndUpdate(id, { filename }, { new: true }).lean().exec()\n    }\n  }\n}\n"]}