{"version":3,"sources":["../index.js"],"names":["url","schema","typeDefs","resolvers","graphqlHandler","req","res","limit","context","db","graphiqlHandler","endpointURL"],"mappings":";;;;;;AAAA;;AACA;;AAEA;;AACA;;IAAYA,G;;AACZ;;AAEA;;AAGA;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;;;;AAZA;;AAIA;;AAEA;AACA;;;AAOA,IAAMC,SAAS,wCAAqB;AAClCC,4BADkC;AAElCC;AAFkC,CAArB,CAAf;;AAKA,IAAMC;AAAA,qEAAiB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAIb,iBAAKD,GAAL,EAAU,EAACE,OAAO,KAAR,EAAV,CAJa;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAQd,qCAAa;AAClBN,4BADkB;AAElBO,uBAAS;AACPC;AADO;AAFS,aAAb,EAKJJ,GALI,EAKCC,GALD,CARc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA,GAAN;AAeA,IAAMI,kBAAkB,sCAAc;AACpCC,eAAa;AADuB,CAAd,CAAxB;;kBAIe;AACb;AACA,sBAAI,oBAAJ,EAA0BP,cAA1B,CAFa,EAGb,uBAAK,oBAAL,EAA2BA,cAA3B,CAHa,EAIb,sBAAI,WAAJ,EAAiBM,eAAjB,CAJa,EAKb,UAACL,GAAD,EAAMC,GAAN;AAAA,SAAc,iBAAKA,GAAL,EAAU,GAAV,EAAe,WAAf,CAAd;AAAA,CALa,C","file":"index.js","sourcesContent":["import { get, post, options, router } from 'microrouter'\nimport { send, json } from 'micro'\n// import cors from 'micro-cors'\nimport { runHttpQuery } from 'apollo-server-core'\nimport * as url from 'url'\nimport { microGraphiql, microGraphql } from 'apollo-server-micro'\n// import { processRequest } from 'apollo-upload-server'\nimport { makeExecutableSchema } from 'graphql-tools'\n// import typeis from 'type-is'\n//不导入这个包，就会报regeneratorRuntime未定义的错误\nimport \"regenerator-runtime/runtime\"\nimport db from './db'\nimport { File } from './file'\nimport typeDefs from './schema'\nimport resolvers from './resolvers'\n\nconst schema = makeExecutableSchema({\n  typeDefs,\n  resolvers\n})\n\nconst graphqlHandler = async (req, res) => {\n  // 对于json只能处理1mb大小body的限制，可以利用json会缓存的特性（其内部又一个WeakMap,保存的是req=>parseBody）\n  // 在microGraphql前面先调用一次json(req, {limit: '1gb'}),这样当microGraphql再调用json解析的时候就会直接从缓存中返回\n  try {\n    await json(req, {limit: '1gb'})\n  } catch (e) {\n    throw e\n  }\n  return microGraphql({\n    schema,\n    context: {\n      db\n    }\n  })(req, res)\n}\nconst graphiqlHandler = microGraphiql({\n  endpointURL: '/graphqlFileUpload'\n})\n\nexport default router(\n  // options('/graphqlFileUpload', cors()),\n  get('/graphqlFileUpload', graphqlHandler),\n  post('/graphqlFileUpload', graphqlHandler),\n  get('/graphiql', graphiqlHandler),\n  (req, res) => send(res, 404, 'not found')\n)\n"]}